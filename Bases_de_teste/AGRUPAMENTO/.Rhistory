install.packages("e1071")
install.packages("randomForest")
install.packages(randomForest)
install.packages("mice")
library(mice)
library(caret)
install.packages("mice")
install.packages("caret")
library(mlbench)
library(caret)
library(mice)
library(Metrics)
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('admissao','admissao.csv',sep =barra))
dados_novos <- read.csv(file = paste('admissao','admissao_novos.csv',sep =barra))
set.seed(728078902)
ind <- createDataPartition(dados$ChanceOfAdmit, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (sqrt(val1 / val2))
}
### Função Pearson
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
set.seed(728078902)
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(ChanceOfAdmit ~ ., data = treino, method = "knn",tuneGrid=tuneGrid)
knn
predict.knn <- predict(knn, teste)
F_r2(teste$ChanceOfAdmit,predict.knn)
F_SYX(teste$ChanceOfAdmit,predict.knn,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.knn)
F_RMSE(teste$ChanceOfAdmit,predict.knn,teste)
F_MAE(teste$ChanceOfAdmit,predict.knn,teste)
set.seed(728078902)
rna <- train(ChanceOfAdmit~., data=treino, method="nnet", linout=T, trace=FALSE)
rna
predict.rna <- predict(rna, teste)
### Mostra as métricas
F_r2(teste$ChanceOfAdmit,predict.rna)
F_SYX(teste$ChanceOfAdmit,predict.rna,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rna)
F_RMSE(teste$ChanceOfAdmit,predict.rna,teste)
F_MAE(teste$ChanceOfAdmit,predict.rna,teste)
set.seed(728078902)
control <- trainControl(method = "cv", number = 10)
rna_cv <- train(ChanceOfAdmit~., data=treino, method="nnet", trainControl=control, linout=T, trace=F)
rna_cv
predict.rna_cv <- predict(rna_cv, teste)
F_r2(teste$ChanceOfAdmit,predict.rna_cv)
F_SYX(teste$ChanceOfAdmit,predict.rna_cv,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rna_cv)
F_RMSE(teste$ChanceOfAdmit,predict.rna_cv,teste)
F_MAE(teste$ChanceOfAdmit,predict.rna_cv,teste)
set.seed(728078902)
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(ChanceOfAdmit~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna_par
predict.rna_par <- predict(rna_par, teste)
F_r2(teste$ChanceOfAdmit,predict.rna_par)
F_SYX(teste$ChanceOfAdmit,predict.rna_par,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rna_par)
F_RMSE(teste$ChanceOfAdmit,predict.rna_par,teste)
F_MAE(teste$ChanceOfAdmit,predict.rna_par,teste)
set.seed(728078902)
svm <- train(ChanceOfAdmit~., data=treino, method="svmRadial")
svm
predict.svm <- predict(svm, teste)
F_r2(teste$ChanceOfAdmit,predict.svm)
F_SYX(teste$ChanceOfAdmit,predict.svm,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.svm)
F_RMSE(teste$ChanceOfAdmit,predict.svm,teste)
F_MAE(teste$ChanceOfAdmit,predict.svm,teste)
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
svm_cv <- train(ChanceOfAdmit~., data=treino, method="svmRadial", trControl=ctrl)
svm_cv
predict.svm_cv<- predict(svm_cv, teste)
F_r2(teste$ChanceOfAdmit,predict.svm_cv)
F_SYX(teste$ChanceOfAdmit,predict.svm_cv,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.svm_cv)
F_RMSE(teste$ChanceOfAdmit,predict.svm_cv,teste)
F_MAE(teste$ChanceOfAdmit,predict.svm_cv,teste)
set.seed(728078902)
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm_par <- train(ChanceOfAdmit~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
svm_par
predict.svm_par <- predict(svm_par, teste)
F_r2(teste$ChanceOfAdmit,predict.svm_par)
F_SYX(teste$ChanceOfAdmit,predict.svm_par,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.svm_par)
F_RMSE(teste$ChanceOfAdmit,predict.svm_par,teste)
F_MAE(teste$ChanceOfAdmit,predict.svm_par,teste)
set.seed(728078902)
rf <- train(ChanceOfAdmit~.,data=treino,method="rf")
rf
predict.rf <- predict(rf,teste)
F_r2(teste$ChanceOfAdmit,predict.rf)
F_SYX(teste$ChanceOfAdmit,predict.rf,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rf)
F_RMSE(teste$ChanceOfAdmit,predict.rf,teste)
F_MAE(teste$ChanceOfAdmit,predict.rf,teste)
set.seed(728078902)
ctrl <- trainControl(method="cv",number = 10)
rf_cv <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl)
rf_cv
predict.rf_cv <- predict(rf_cv,teste)
F_r2(teste$ChanceOfAdmit,predict.rf_cv)
F_SYX(teste$ChanceOfAdmit,predict.rf_cv,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rf_cv)
F_RMSE(teste$ChanceOfAdmit,predict.rf_cv,teste)
F_MAE(teste$ChanceOfAdmit,predict.rf_cv,teste)
set.seed(728078902)
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf_par <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$ChanceOfAdmit,predict.rf_par)
F_SYX(teste$ChanceOfAdmit,predict.rf_par,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rf_par)
F_RMSE(teste$ChanceOfAdmit,predict.rf_par,teste)
F_MAE(teste$ChanceOfAdmit,predict.rf_par,teste)
set.seed(728078902)
tuneGrid = expand.grid(mtry=c(1,2,5,7,9,11))
rf_par <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$ChanceOfAdmit,predict.rf_par)
F_SYX(teste$ChanceOfAdmit,predict.rf_par,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rf_par)
F_RMSE(teste$ChanceOfAdmit,predict.rf_par,teste)
F_MAE(teste$ChanceOfAdmit,predict.rf_par,teste)
View(dados_novos)
########################## Novos Casos
predict.melhor_caso <- predict(rf_cv, dados_novos)
dados_novos <- cbind(dados_novos, predict.melhor_caso)
view(dados_novos)
view(dados_novos)
View(dados_novos)
########################## Novos Casos
dados_novos$Chance.ofAdmit <- NULL
View(dados_novos)
resid = ((teste$ChanceOfAdmit - predict.rf_cv)/teste$ChanceOfAdmit) * 100
plot(resid ~ predict.rf_cv,
xlab="Valor estimado",
ylab="Resíduos (%)",
col=2)
abline(h=0,col=4)
library(mlbench)
library(caret)
library(mice)
library(Metrics)
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('alunos','alunos.csv',sep =barra))
dados_novos <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/alunos/alunos_novos.csv')
dados_novos <- read.csv(file = paste('alunos','alunos_novos.csv',sep =barra))
set.seed(728078902)
ind <- createDataPartition(dados$G3, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (sqrt(val1 / val2))
}
### Função Pearson
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
set.seed(728078902)
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(G3 ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
predict.knn <- predict(knn, teste)
### Mostra as métricas
F_r2(teste$G3,predict.knn)
F_SYX(teste$G3,predict.knn,teste)
F_PEARSON(teste$G3,predict.knn)
F_RMSE(teste$G3,predict.knn,teste)
F_MAE(teste$G3,predict.knn,teste)
set.seed(728078902)
rna <- train(G3~., data=treino, method="nnet", linout=T, trace=FALSE)
rna
predict.rna <- predict(rna, teste)
### Mostra as métricas
F_r2(teste$G3,predict.rna)
F_SYX(teste$G3,predict.rna,teste)
F_PEARSON(teste$G3,predict.rna)
F_RMSE(teste$G3,predict.rna,teste)
F_MAE(teste$G3,predict.rna,teste)
set.seed(728078902)
control <- trainControl(method = "cv", number = 10)
rna_cv <- train(G3~., data=treino, method="nnet", trainControl=control, linout=T, trace=F)
rna_cv
predict.rna_cv <- predict(rna_cv, teste)
F_r2(teste$G3,predict.rna_cv)
F_SYX(teste$G3,predict.rna_cv,teste)
F_PEARSON(teste$G3,predict.rna_cv)
F_RMSE(teste$G3,predict.rna_cv,teste)
F_MAE(teste$G3,predict.rna_cv,teste)
set.seed(728078902)
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(G3~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna_par
predict.rna_par <- predict(rna_par, teste)
F_r2(teste$G3,predict.rna_par)
F_SYX(teste$G3,predict.rna_par,teste)
F_PEARSON(teste$G3,predict.rna_par)
F_RMSE(teste$G3,predict.rna_par,teste)
F_MAE(teste$G3,predict.rna_par,teste)
set.seed(728078902)
svm <- train(G3~., data=treino, method="svmRadial")
svm
predict.svm <- predict(svm, teste)
F_r2(teste$G3,predict.rna_par)
F_SYX(teste$G3,predict.rna_par,teste)
F_PEARSON(teste$G3,predict.rna_par)
F_RMSE(teste$G3,predict.rna_par,teste)
F_MAE(teste$G3,predict.rna_par,teste)
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
svm_cv <- train(G3~., data=treino, method="svmRadial", trControl=ctrl)
svm_cv
predict.svm_cv <- predict(svm_cv, teste)
F_r2(teste$G3,predict.svm_cv)
F_SYX(teste$G3,predict.svm_cv,teste)
F_PEARSON(teste$G3,predict.svm_cv)
F_RMSE(teste$G3,predict.svm_cv,teste)
F_MAE(teste$G3,predict.svm_cv,teste)
set.seed(728078902)
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm_par <- train(G3~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
predict.svm_par <- predict(svm_par, teste)
F_r2(teste$G3,predict.svm_par)
F_SYX(teste$G3,predict.svm_par,teste)
F_PEARSON(teste$G3,predict.svm_par)
F_RMSE(teste$G3,predict.svm_par,teste)
F_MAE(teste$G3,predict.svm_par,teste)
svm_par
set.seed(728078902)
rf <- train(G3~.,data=treino,method="rf")
rf
predict.rf <- predict(rf,teste)
F_r2(teste$G3,predict.rf)
F_SYX(teste$G3,predict.rf,teste)
F_PEARSON(teste$G3,predict.rf)
F_RMSE(teste$G3,predict.rf,teste)
F_MAE(teste$G3,predict.rf,teste)
set.seed(728078902)
ctrl <- trainControl(method="cv",number = 10)
rf_cv <- train(G3~.,data=treino,method="rf",trControl=ctrl)
rf_cv
predict.rf_cv <- predict(rf_cv,teste)
F_r2(teste$G3,predict.rf_cv)
F_SYX(teste$G3,predict.rf_cv,teste)
F_PEARSON(teste$G3,predict.rf_cv)
F_RMSE(teste$G3,predict.rf_cv,teste)
F_MAE(teste$G3,predict.rf_cv,teste)
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf_par <- train(G3~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$G3,predict.rf_par)
F_SYX(teste$G3,predict.rf_par,teste)
F_PEARSON(teste$G3,predict.rf_par)
F_RMSE(teste$G3,predict.rf_par,teste)
F_MAE(teste$G3,predict.rf_par,teste)
tuneGrid = expand.grid(mtry=c(21,41,45,51))
rf_par <- train(G3~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$G3,predict.rf_par)
F_SYX(teste$G3,predict.rf_par,teste)
F_PEARSON(teste$G3,predict.rf_par)
F_RMSE(teste$G3,predict.rf_par,teste)
F_MAE(teste$G3,predict.rf_par,teste)
tuneGrid = expand.grid(mtry=c(21,41,43,45))
rf_par <- train(G3~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$G3,predict.rf_par)
F_SYX(teste$G3,predict.rf_par,teste)
F_PEARSON(teste$G3,predict.rf_par)
F_RMSE(teste$G3,predict.rf_par,teste)
F_MAE(teste$G3,predict.rf_par,teste)
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf_par <- train(G3~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$G3,predict.rf_par)
F_SYX(teste$G3,predict.rf_par,teste)
F_PEARSON(teste$G3,predict.rf_par)
F_RMSE(teste$G3,predict.rf_par,teste)
F_MAE(teste$G3,predict.rf_par,teste)
set.seed(728078902)
tuneGrid = expand.grid(mtry=c(21,31,41,43,45))
rf_par <- train(G3~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
F_r2(teste$G3,predict.rf_par)
F_SYX(teste$G3,predict.rf_par,teste)
F_PEARSON(teste$G3,predict.rf_par)
F_RMSE(teste$G3,predict.rf_par,teste)
F_MAE(teste$G3,predict.rf_par,teste)
set.seed(728078902)
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm_par <- train(G3~., data=treino, method="svmRadial", tuneGrid=tuneGrid)
svm_par
predict.svm_par <- predict(svm_par, teste)
F_r2(teste$G3,predict.svm_par)
F_SYX(teste$G3,predict.svm_par,teste)
F_PEARSON(teste$G3,predict.svm_par)
F_RMSE(teste$G3,predict.svm_par,teste)
F_MAE(teste$G3,predict.svm_par,teste)
F_r2(teste$G3,predict.rna_par)
F_SYX(teste$G3,predict.rna_par,teste)
F_PEARSON(teste$G3,predict.rna_par)
F_RMSE(teste$G3,predict.rna_par,teste)
F_MAE(teste$G3,predict.rna_par,teste)
F_r2(teste$G3,predict.svm)
F_SYX(teste$G3,predict.svm,teste)
F_PEARSON(teste$G3,predict.svm)
F_RMSE(teste$G3,predict.svm,teste)
F_MAE(teste$G3,predict.svm,teste)
View(dados_novos)
########################## Novos Casos
dados_novos$G3 <- NULL
predict.melhor_modelo <- predict(rf_cv,dados_novos)
dados_novos <- cbind(dados_novos, predict.melhor_modelo)
View(dados_novos)
resid = ((teste$G3 - predict.rf_cv)/teste$G3) * 100
plot(resid ~ predict.rf_cv,
xlab="Valor estimado",
ylab="Resíduos (%)",
col=2)
abline(h=0,col=4)
install.packages("C:/Users/escneto/Downloads/klaR_1.7-1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/escneto/Downloads/combinat_0.0-8.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/escneto/Downloads/questionr_0.7.7.tar.gz", repos = NULL, type = "source")
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
data("iris")
dados <- iris
set.seed(728078902)
irisCluster <- kmeans(iris[,3:4],3)
irisCluster
resultado <- cbind(dados,irisCluster$cluster)
resultado
data("iris")
dados <- iris
set.seed(728078902)
irisCluster <- kmeans(iris,3)
irisCluster
resultado <- cbind(dados,irisCluster$cluster)
resultado
library(klaR)
dados <- read.csv(file = 'moveis.csv')
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
dados <- read.csv(file = 'moveis.csv')
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste\\AGRUPAMENTO')
dados <- read.csv(file = 'moveis.csv')
dados <- read.csv(file = 'moveis.csv')
set.seed(728078902)
moveisCluster <- kmodes(dados,10,iter.max = 10, weighted = FALSE)
library(klaR)
install.packages(klaR)
install.packages("klaR")
dados <- read.csv(file = 'moveis.csv')
set.seed(728078902)
moveisCluster <- kmodes(dados,10,iter.max = 10, weighted = FALSE)
moveisCluster <- kmodes(dados,10,iter.max = 10, weighted = FALSE)
library(klaR)
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
