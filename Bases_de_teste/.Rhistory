dados[2:19]
set.seed(728078902)
veiculoCluster <- kmeans(dados[2:19],2)
veiculoCluster
set.seed(728078902)
veiculoCluster <- kmeans(dados[2:19],4)
veiculoCluster
resultado <- cbind(dados,veiculoCluster$cluster)
resultado[2:20]
resultado[2:21]
resultado[2:21]
dados <- read.csv(file = 'banco.csv')
dados <- read.csv(file = 'banco.csv')
View(dados)
dados[0:-1]
dados[0:-2]
dados[0:-2]
dados[0:8]
library(klaR)
dados <- read.csv(file = 'banco.csv')
set.seed(728078902)
bancoCluster <- kmodes(dados[0:8],2,iter.max = 10, weighted = FALSE)
bancoCluster
resultado <- cbind(dados,bancoCluster$cluster)
resultado
library("caret")
library("mice")
library(mlbench)
##Note
setwd('/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste')
barra ="/"
dados <- read.csv(file = paste('previsao_tempo','previsao_tempo.csv',sep =barra))
dados_novos <- read.csv(file = paste('previsao_tempo','previsao_tempo_novos.csv',sep =barra))
### Cria arquivos de treino e teste
set.seed(728078902)
ran <- sample(1:nrow(dados), 0.8 * nrow(dados))
treino <- dados[ran,]
teste <- dados[-ran,]
set.seed(728078902)
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(Chovera~., data = treino, method = "knn",tuneGrid=tuneGrid)
knn
predict.knn <- predict(knn, teste)
confusionMatrix(predict.knn, as.factor(teste$Chovera))
set.seed(728078902)
rna <- train(Chovera~.,data=treino,method="nnet",trace=FALSE)
rna
predict.rna <-predict(rna,teste)
confusionMatrix(predict.rna,as.factor(teste$Chovera))
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
rna_cv <- train(Chovera~.,data=treino,method="nnet",trace=FALSE,trControl=ctrl)
rna_cv
predict.rna_cv <- predict(rna_cv,teste)
confusionMatrix(predict.rna_cv,as.factor(teste$Chovera))
set.seed(728078902)
grid <-expand.grid(size=seq(from=1,to=45,by=10),decay=seq(from=0.01, to=0.9, by=0.3))
rna_par <- train(form=Chovera~., data=treino, method="nnet", tuneGrid=grid, trControl=ctrl, maxit=2000, trace=FALSE)
rna_par
predict.rna_par <- predict(rna_par,teste)
confusionMatrix(predict.rna_par,as.factor(teste$Chovera))
set.seed(728078902)
svm <- train(Chovera~.,data=treino,method="svmRadial")
svm
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm,as.factor(teste$Chovera))
set.seed(728078902)
ctrl <- trainControl(method="cv",number=10)
svm_cv <- train(Chovera~.,data=treino,method="svmRadial",trControl=ctrl)
svm_cv
predict.svm_cv <- predict(svm_cv,teste)
confusionMatrix(predict.svm_cv,as.factor(teste$Chovera))
set.seed(728078902)
tuneGrid = expand.grid(C=c(1,2,10,50,100),sigma=c(.01,.015,0.2))
svm_par <- train(Chovera~.,data=treino,method="svmRadial",trControl=ctrl,tuneGrid=tuneGrid)
svm_par
predict.svm_par <- predict(svm_par,teste)
confusionMatrix(predict.svm_par,as.factor(teste$Chovera))
set.seed(728078902)
rf <- train(Chovera~.,data=treino,method="rf")
rf
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf,as.factor(teste$Chovera))
set.seed(728078902)
ctrl <- trainControl(method="cv",number=10)
rf_cv <- train(Chovera~.,data=treino,method="rf",trControl=ctrl)
rf_cv
predict.rf_cv <- predict(rf_cv,teste)
confusionMatrix(predict.rf_cv,as.factor(teste$Chovera))
set.seed(728078902)
tuneGrid = expand.grid(mtry=c(2, 5, 7, 9))
rf_par <- train(Chovera~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
confusionMatrix(predict.rf_par,as.factor(teste$Chovera))
library("caret")
library(mlbench)
library(mice)
setwd('/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste')
barra ="/"
dados <- read.csv(file = paste('diabetes','diabetes.csv',sep =barra))
dados_novos <- read.csv(file = paste('diabetes','diabetes_novos.csv',sep =barra))
dados$num <- NULL
dados_novos$num <-NULL
set.seed(728078902)
ran <- sample(1:nrow(dados), 0.8 * nrow(dados))
treino <- dados[ran,]
teste <- dados[-ran,]
set.seed(728078902)
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(diabetes~., data = treino, method = "knn",tuneGrid=tuneGrid)
knn
predict.knn <- predict(knn, teste)
confusionMatrix(predict.knn, as.factor(teste$diabetes))
set.seed(728078902)
rna <- train(diabetes~., data=treino, method="nnet",trace=FALSE)
rna
predict.rna <- predict(rna, teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
rna_cv <- train(diabetes~., data=treino, method="nnet",trace=FALSE, trControl=ctrl)
rna_cv
predict.rna_cv <- predict(rna_cv, teste)
confusionMatrix(predict.rna_cv, as.factor(teste$diabetes))
set.seed(728078902)
grid <- expand.grid(size = seq(from = 1, to = 45, by = 10),decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(form = diabetes~.,data = treino,method = "nnet",tuneGrid = grid,trControl = ctrl,maxit = 2000,trace=FALSE)
rna_par
predict.rna_par <- predict(rna_par, teste)
confusionMatrix(predict.rna_par, as.factor(teste$diabetes))
set.seed(728078902)
svm
set.seed(728078902)
svm <- train(diabetes~., data=treino, method="svmRadial")
svm
predict.svm <- predict(svm, teste)
confusionMatrix(predict.svm, as.factor(teste$diabetes))
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
svm_cv <- train(diabetes~., data=treino, method="svmRadial", trControl=ctrl)
svm_cv
predict.svm_cv <- predict(svm_cv, teste)
confusionMatrix(predict.svm_cv, as.factor(teste$diabetes))
set.seed(728078902)
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm_par <- train(diabetes~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
svm_par
predict.svm_par <- predict(svm_par, teste)
confusionMatrix(predict.svm_par, as.factor(teste$diabetes))
set.seed(728078902)
rf <- train(diabetes~.,data=treino,method="rf")
rf
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf,as.factor(teste$diabetes))
set.seed(728078902)
ctrl <- trainControl(method="cv",number=10)
rf_cv <- train(diabetes~.,data=treino,method="rf",trControl=ctrl)
rf_cv
predict.rf_cv <- predict(rf_cv,teste)
confusionMatrix(predict.rf_cv,as.factor(teste$diabetes))
set.seed(728078902)
tuneGrid = expand.grid(mtry=c(2, 5, 7, 9))
rf_par <- train(diabetes~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
confusionMatrix(predict.rf_par,as.factor(teste$diabetes))
cmknn <- confusionMatrix(predict.knn,as.factor(teste$diabetes))
cmrna <- confusionMatrix(predict.rna,as.factor(teste$diabetes))
cmrna_cv <- confusionMatrix(predict.rna_cv,as.factor(teste$diabetes))
cmrna_par <- confusionMatrix(predict.rna_par,as.factor(teste$diabetes))
cmsvm <- confusionMatrix(predict.svm,as.factor(teste$diabetes))
cmsvm_cv <- confusionMatrix(predict.svm_cv,as.factor(teste$diabetes))
cmsvm_par <- confusionMatrix(predict.svm_par,as.factor(teste$diabetes))
cmrf <- confusionMatrix(predict.rf,as.factor(teste$diabetes))
cmrf_cv <- confusionMatrix(predict.rf_cv,as.factor(teste$diabetes))
cmrf_par <- confusionMatrix(predict.rf_par,as.factor(teste$diabetes))
cmknn
cmsvm_par
cmrna_par
cmrna_par[1,1]
cmrna_par
View(cmknn)
cmknn$table
cmknn$table[1,1]
cmknn$table[1,2]
cmknn$table[2,1]
data= matrix(rep(0,40), ncol=10, byrow=TRUE)
data
data= matrix(rep(0,40), ncol=4, byrow=TRUE)
data
colnames(data) = c('X','Y','distancia')
colnames(data) = c('X','Y','distancia')
data= matrix(rep(0,30), ncol=3, byrow=TRUE)
colnames(data) = c('X','Y','distancia')
data
rownames(data) = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par')
data
data["knn"]
data["knn",X]
data["knn","X"]
func_ROC <- function(tabela,cm,modelo) {
VP <- cm[1,1]
FP <- cm[2,1]
VN <- cm[2,2]
FN <- cm[1,2]
X <- 1-(VN / (VN+FP))
Y <- VP / (VP+FN)
distancia <- sqrt(X^2 + (Y-1)^2)
tabela[modelo,"X"] <- X
tabela[modelo,"Y"] <- Y
tabela[modelo,"distancia"] <- distancia
}
data= matrix(rep(0,30), ncol=3, byrow=TRUE)
colnames(data) = c('X','Y','distancia')
rownames(data) = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par')
func_ROC(data,cmknn,"knn")
func_ROC(data,cmknn$table,"knn")
data
func_ROC <- function(tabela,cm,modelo) {
VP <- cm[1,1]
FP <- cm[2,1]
VN <- cm[2,2]
FN <- cm[1,2]
X <- 1-(VN / (VN+FP))
Y <- VP / (VP+FN)
distancia <- sqrt(X^2 + (Y-1)^2)
tabela[modelo,"X"] <- X
tabela[modelo,"Y"] <- Y
tabela[modelo,"distancia"] <- distancia
return (tabela)
}
data= matrix(rep(0,30), ncol=3, byrow=TRUE)
colnames(data) = c('X','Y','distancia')
rownames(data) = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par')
data <- func_ROC(data,cmknn$table,"knn")
data
data <- func_ROC(data,cmrna$table,"rna")
data
data <- func_ROC(data,cmrna_cv$table,"rna_cv")
data <- func_ROC(data,cmrna_par$table,"rna_par")
data <- func_ROC(data,cmsvm$table,"svm")
data <- func_ROC(data,cmsvm_cv$table,"svm_cv")
data <- func_ROC(data,cmsvm_par$table,"svm_par")
data <- func_ROC(data,cmrf$table,"rf")
data <- func_ROC(data,cmrf_cv$table,"rf_cv")
data <- func_ROC(data,cmrf_par$table,"rf_par")
data
plot(data[1:2])
plot(data)
plot(data["Y"])
plot(data["Y"]~data["X"])
data["Y"]
data[2]
data[:"Y"]
data["Y":]
View(data)
data$Y
as.table(data)
as.table(data)$Y
data <- as.table(data)
data$Y
data$"Y"
data= matrix(rep(0,30), ncol=3, byrow=TRUE)
colnames(data) = c('X','Y','distancia')
rownames(data) = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par')
data <- func_ROC(data,cmknn$table,"knn")
data <- func_ROC(data,cmrna$table,"rna")
data <- func_ROC(data,cmrna_cv$table,"rna_cv")
data <- func_ROC(data,cmrna_par$table,"rna_par")
data <- func_ROC(data,cmsvm$table,"svm")
data <- func_ROC(data,cmsvm_cv$table,"svm_cv")
data <- func_ROC(data,cmsvm_par$table,"svm_par")
data <- func_ROC(data,cmrf$table,"rf")
data <- func_ROC(data,cmrf_cv$table,"rf_cv")
data <- func_ROC(data,cmrf_par$table,"rf_par")
data
View(data)
data[,"Y"]
plot(data[,"Y"] ~ data[,"X"])
plot(data[,"X"], data[,"Y"], axes = FALSE)
plot(data[,"X"], data[,"Y"], xlab = "X", ylab = "Y")
axis(1, at = 0:1)
axis(2, at = 0:1)
plot(data[,"X"], data[,"Y"], xlab = "X", ylab = "Y")
axis(1, at = 0:1)
axis(2, at = 0:1)
axis(side=1, at=seq(0, 1, by=0.1))
axis(side=2, at=seq(0, 1, by=0.1))
plot(data[,"X"], data[,"Y"], xlab = "X", ylab = "Y")
df <- as.data.frame(data)
df
df$X
data= matrix(rep(0,40), ncol=4, byrow=TRUE)
colnames(data) = c('modelo','X','Y','distancia')
rownames(data) = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par')
data <- func_ROC(data,cmknn$table,"knn")
data
func_ROC <- function(tabela,cm,modelo) {
VP <- cm[1,1]
FP <- cm[2,1]
VN <- cm[2,2]
FN <- cm[1,2]
X <- 1-(VN / (VN+FP))
Y <- VP / (VP+FN)
distancia <- sqrt(X^2 + (Y-1)^2)
tabela[modelo,"X"] <- X
tabela[modelo,"Y"] <- Y
tabela[modelo,"distancia"] <- distancia
tabela[modelo,"modelo"] <- modelo
return (tabela)
}
data= matrix(rep(0,40), ncol=4, byrow=TRUE)
colnames(data) = c('modelo','X','Y','distancia')
rownames(data) = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par')
data <- func_ROC(data,cmknn$table,"knn")
data
df.ROC <- data.frame(
modelo = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par'),
X = c(rep(0,10)),
Y = c(rep(0,10)),
distancia = c(rep(0,10))
)
df.ROC
func_ROC <- function(df,cm,modelo) {
VP <- cm[1,1]
FP <- cm[2,1]
VN <- cm[2,2]
FN <- cm[1,2]
X <- 1-(VN / (VN+FP))
Y <- VP / (VP+FN)
distancia <- sqrt(X^2 + (Y-1)^2)
df[df$modelo==modelo,"X"] <- X
df[df$modelo==modelo,"Y"] <- Y
df[df$modelo==modelo,"distancia"] <- distancia
return (df)
}
df <- func_ROC(data,cmknn$table,"knn")
df <- func_ROC(df,cmknn$table,"knn")
df
func_ROC <- function(df,cm,modelo) {
VP <- cm[1,1]
FP <- cm[2,1]
VN <- cm[2,2]
FN <- cm[1,2]
X <- 1-(VN / (VN+FP))
Y <- VP / (VP+FN)
distancia <- sqrt(X^2 + (Y-1)^2)
df[df$modelo==modelo,"X"] <- X
df[df$modelo==modelo,"Y"] <- Y
df[df$modelo==modelo,"distancia"] <- distancia
return (df)
}
DF
df
df.ROC <- data.frame(
modelo = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par'),
X = c(rep(0,10)),
Y = c(rep(0,10)),
distancia = c(rep(0,10))
)
df.ROC <- func_ROC(df.ROC,cmknn$table,"knn")
df.ROC
df.ROC <- func_ROC(df.ROC,cmrna$table,"rna")
df.ROC
df.ROC <- func_ROC(df.ROC,cmrna_cv$table,"rna_cv")
df.ROC <- func_ROC(df.ROC,cmrna_par$table,"rna_par")
df.ROC <- func_ROC(df.ROC,cmsvm$table,"svm")
df.ROC <- func_ROC(df.ROC,cmsvm_cv$table,"svm_cv")
df.ROC <- func_ROC(df.ROC,cmsvm_par$table,"svm_par")
df.ROC <- func_ROC(df.ROC,cmrf$table,"rf")
df.ROC <- func_ROC(df.ROC,cmrf_cv$table,"rf_cv")
df.ROC <- func_ROC(df.ROC,cmrf_par$table,"rf_par")
df.ROC
plot(df.ROC$X, df.ROC$Y, xlab = "X", ylab = "Y")
plot(df.ROC$X, df.ROC$Y, xlab = "X", ylab = "Y")
axis(side=1, at=seq(0, 1, by=0.1))
plot(df.ROC$X, df.ROC$Y, xlab = "X", ylab = "Y")
text(df.ROC$X, df.ROC$Y, labels=df.ROC$modelo)
ggplot(df.ROC, aes(x=X, y=Y)) +
geom_point() +
labs(x="X", y="Y", title="Diagrama ROC")
ggplot(df.ROC, aes(x=X, y=Y, label=modelo)) +
geom_point() +
labs(x="X", y="Y", title="Diagrama ROC")
ggplot(df.ROC, aes(x=X, y=Y, label=modelo)) +
geom_point() +
labs(x="X", y="Y", title="Diagrama ROC") + geom_text(hjust=0, vjust=0)
ggplot(df.ROC, aes(x=X, y=Y, label=modelo)) +
geom_point() +
labs(x="X", y="Y", title="Gráfico ROC") + geom_text(hjust=0, vjust=0)
library("caret")
library(mlbench)
library(mice)
setwd('/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste')
barra ="/"
dados <- read.csv(file = paste('diabetes','diabetes.csv',sep =barra))
dados_novos <- read.csv(file = paste('diabetes','diabetes_novos.csv',sep =barra))
dados$num <- NULL
dados_novos$num <-NULL
set.seed(728078902)
ran <- sample(1:nrow(dados), 0.8 * nrow(dados))
treino <- dados[ran,]
teste <- dados[-ran,]
set.seed(728078902)
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(diabetes~., data = treino, method = "knn",tuneGrid=tuneGrid)
knn
predict.knn <- predict(knn, teste)
confusionMatrix(predict.knn, as.factor(teste$diabetes))
set.seed(728078902)
rna <- train(diabetes~., data=treino, method="nnet",trace=FALSE)
rna
predict.rna <- predict(rna, teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
rna_cv <- train(diabetes~., data=treino, method="nnet",trace=FALSE, trControl=ctrl)
rna_cv
predict.rna_cv <- predict(rna_cv, teste)
confusionMatrix(predict.rna_cv, as.factor(teste$diabetes))
set.seed(728078902)
grid <- expand.grid(size = seq(from = 1, to = 45, by = 10),decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(form = diabetes~.,data = treino,method = "nnet",tuneGrid = grid,trControl = ctrl,maxit = 2000,trace=FALSE)
rna_par
predict.rna_par <- predict(rna_par, teste)
confusionMatrix(predict.rna_par, as.factor(teste$diabetes))
set.seed(728078902)
ctrl <- trainControl(method = "cv", number = 10)
svm_cv <- train(diabetes~., data=treino, method="svmRadial", trControl=ctrl)
svm_cv
predict.svm_cv <- predict(svm_cv, teste)
confusionMatrix(predict.svm_cv, as.factor(teste$diabetes))
set.seed(728078902)
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm_par <- train(diabetes~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
svm_par
predict.svm_par <- predict(svm_par, teste)
confusionMatrix(predict.svm_par, as.factor(teste$diabetes))
set.seed(728078902)
rf <- train(diabetes~.,data=treino,method="rf")
rf
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf,as.factor(teste$diabetes))
set.seed(728078902)
ctrl <- trainControl(method="cv",number=10)
rf_cv <- train(diabetes~.,data=treino,method="rf",trControl=ctrl)
rf_cv
predict.rf_cv <- predict(rf_cv,teste)
confusionMatrix(predict.rf_cv,as.factor(teste$diabetes))
set.seed(728078902)
tuneGrid = expand.grid(mtry=c(2, 5, 7, 9))
rf_par <- train(diabetes~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
rf_par
predict.rf_par <- predict(rf_par,teste)
confusionMatrix(predict.rf_par,as.factor(teste$diabetes))
dados_novos$diabetes <-NULL
predict.melhor_modelo <- predict(svm_par,dados_novos)
dados_novos <-cbind(dados_novos,predict.melhor_modelo)
View(dados_novos)
cmknn <- confusionMatrix(predict.knn,as.factor(teste$diabetes))
cmrna <- confusionMatrix(predict.rna,as.factor(teste$diabetes))
cmrna_cv <- confusionMatrix(predict.rna_cv,as.factor(teste$diabetes))
cmrna_par <- confusionMatrix(predict.rna_par,as.factor(teste$diabetes))
cmsvm <- confusionMatrix(predict.svm,as.factor(teste$diabetes))
set.seed(728078902)
svm <- train(diabetes~., data=treino, method="svmRadial")
svm
predict.svm <- predict(svm, teste)
confusionMatrix(predict.svm, as.factor(teste$diabetes))
cmknn <- confusionMatrix(predict.knn,as.factor(teste$diabetes))
cmrna <- confusionMatrix(predict.rna,as.factor(teste$diabetes))
cmrna_cv <- confusionMatrix(predict.rna_cv,as.factor(teste$diabetes))
cmrna_par <- confusionMatrix(predict.rna_par,as.factor(teste$diabetes))
cmsvm <- confusionMatrix(predict.svm,as.factor(teste$diabetes))
cmsvm_cv <- confusionMatrix(predict.svm_cv,as.factor(teste$diabetes))
cmsvm_par <- confusionMatrix(predict.svm_par,as.factor(teste$diabetes))
cmrf <- confusionMatrix(predict.rf,as.factor(teste$diabetes))
cmrf_cv <- confusionMatrix(predict.rf_cv,as.factor(teste$diabetes))
cmrf_par <- confusionMatrix(predict.rf_par,as.factor(teste$diabetes))
df.ROC <- data.frame(
modelo = c('knn','rna','rna_cv','rna_par','svm','svm_cv','svm_par','rf','rf_cv','rf_par'),
X = c(rep(0,10)),
Y = c(rep(0,10)),
distancia = c(rep(0,10))
)
func_ROC <- function(df,cm,modelo) {
VP <- cm[1,1]
FP <- cm[2,1]
VN <- cm[2,2]
FN <- cm[1,2]
X <- 1-(VN / (VN+FP))
Y <- VP / (VP+FN)
distancia <- sqrt(X^2 + (Y-1)^2)
df[df$modelo==modelo,"X"] <- X
df[df$modelo==modelo,"Y"] <- Y
df[df$modelo==modelo,"distancia"] <- distancia
return (df)
}
df.ROC <- func_ROC(df.ROC,cmknn$table,"knn")
df.ROC <- func_ROC(df.ROC,cmrna$table,"rna")
df.ROC <- func_ROC(df.ROC,cmrna_cv$table,"rna_cv")
df.ROC <- func_ROC(df.ROC,cmrna_par$table,"rna_par")
df.ROC <- func_ROC(df.ROC,cmsvm$table,"svm")
df.ROC <- func_ROC(df.ROC,cmsvm_cv$table,"svm_cv")
df.ROC <- func_ROC(df.ROC,cmsvm_par$table,"svm_par")
df.ROC <- func_ROC(df.ROC,cmrf$table,"rf")
df.ROC <- func_ROC(df.ROC,cmrf_cv$table,"rf_cv")
df.ROC <- func_ROC(df.ROC,cmrf_par$table,"rf_par")
ggplot(df.ROC, aes(x=X, y=Y, label=modelo)) +
geom_point() +
labs(x="X", y="Y", title="Gráfico ROC") + geom_text(hjust=0, vjust=0)
