treino <- dados[ran,]
teste <- dados[-ran,]
########################## KNN
### Faz um grid com valores para K e Executa o KNN
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(diabetes~., data = treino, method = "knn",tuneGrid=tuneGrid)
### Faz a predição e mostra a matriz de confusão
predict.knn <- predict(knn, teste)
### Faz a predição e mostra a matriz de confusão
predict.knn <- predict(knn, teste)
confusionMatrix(predict.knn, as.factor(teste$diabetes))
### PREDIÇÕES DE NOVOS CASOS
predict.knn <- predict(knn, dados_novos)
View(dados_novos)
dados_novos$diabetes <- NULL
dados_novos <- cbind(dados_novos, predict.knn)
########## Treinar o modelo com Hold-out
rna <- train(diabetes~., data=treino, method="nnet",trace=FALSE)
### Predições dos valores do conjunto de teste
predict.rna <- predict(rna, teste)
### Matriz de confusão
confusionMatrix(predict.rna, as.factor(teste$y))
### Matriz de confusão
confusionMatrix(predict.rna, as.factor(teste$diabetes))
########## Usando Cross-validation
### indica o método cv e numero de folders 10
ctrl <- trainControl(method = "cv", number = 10)
### executa a RNA com esse ctrl
rna2 <- train(diabetes~., data=treino, method="nnet",trace=FALSE, trControl=ctrl)
predict.rna2 <- predict(rna2, teste)
confusionMatrix(predict.rna2, as.factor(teste$y))
confusionMatrix(predict.rna2, as.factor(teste$diabetes))
########### Parametrização da RNA
### size, decay
grid <- expand.grid(size = seq(from = 1, to = 35, by = 10),decay = seq(from = 0.1, to = 0.6, by = 0.3))
rna3 <- train(
form = diabetes~. ,
data = treino ,
method = "nnet" ,
tuneGrid = grid ,
trControl = ctrl ,
maxit = 2000,trace=FALSE)
### Faz as predições e mostra matriz de confusão
predict.rna3 <- predict(rna3, teste)
confusionMatrix(predict.rna3, as.factor(teste$y))
confusionMatrix(predict.rna3, as.factor(teste$diabetes))
predict.rna <- predict(rna, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna)
predict.rna2 <- predict(rna2, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna2)
predict.rna3 <- predict(rna3, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna3)
View(dados_novos)
########################## SVN
### Treinar SVM com a base de Treino
svm <- train(diabetes~., data=treino, method="svmRadial")
### 6. Aplicar modelos treinados na base de Teste
predict.svm <- predict(svm, teste)
confusionMatrix(predict.svm, as.factor(teste$diabetes))
#### Cross-validation SVM
ctrl <- trainControl(method = "cv", number = 10)
svm2 <- train(diabetes~., data=treino, method="svmRadial", trControl=ctrl)
### matriz de confusao com todos os dados
predict.svm2 <- predict(svm2, teste)
confusionMatrix(predict.svm2, as.factor(teste$y))
confusionMatrix(predict.svm2, as.factor(teste$diabetes))
#### Vários C e sigma
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm3 <- train(y~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
svm3 <- train(diabetes~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
### matriz de confusao com todos os dados
predict.svm3 <- predict(svm3, teste)
confusionMatrix(predict.svm3, as.factor(teste$y))
confusionMatrix(predict.svm3, as.factor(teste$diabetes))
predict.svm <- predict(svm, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm)
predict.svm2 <- predict(svm2, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm2)
predict.svm3 <- predict(svm3, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm3)
library("caret")
library(Metrics)
dados <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/admissao/admissao.csv')
dados_novos <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/admissao/admissao.csv')
View(dados)
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$ChanceOfAdmit, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
r2 <- function(predito, observado) {
return(1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
########################## Random Forest
rf <- train(ChanceOfAdmit~.,data=treino,method="rf)
########################## Random Forest
########################## Random Forest
rf <- train(ChanceOfAdmit~.,data=treino,method="rf)
rf <- train(ChanceOfAdmit~.,data=treino,method="rf")
rf <- train(ChanceOfAdmit~.,data=treino,method="rf")
rf
rmse(teste$ChanceOfAdmit,predicoes.rf)
predicoes.rf <- predict(rf,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf)
r2(predicoes.rf,teste$ChanceOfAdmit)
rf2 <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl)
##Cross Validation
ctrl <- trainControl(method="cv",number = 10)
rf2 <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl)
predicoes.rf2 <- predict(rf2,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf2)
r2(predicoes.rf2,teste$ChanceOfAdmit)
rf3 <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
##Varios mtry
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf3 <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
predicoes.rf3 <- predict(rf3,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf3)
r2(predicoes.rf3,teste$ChanceOfAdmit)
gc()
library("caret")
library(Metrics)
dados <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/admissao/admissao.csv')
dados_novos <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/admissao/admissao.csv')
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$ChanceOfAdmit, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
r2 <- function(predito, observado) {
return(1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
########################## KNN
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(ChanceOfAdmit ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
### Mostra as métricas
rmse(teste$ChanceOfAdmit, predict.knn)
r2(predict.knn,teste$ChanceOfAdmit)
### Novos casos
predict.knn <- predict(knn, dados_novos)
dados_novos <- cbind(dados_novos, predict.knn)
########################## RNA
### Treino com Hold-Out
rna <- train(ChanceOfAdmit~., data=treino, method="nnet", linout=T, trace=FALSE)
predicoes.rna <- predict(rna, teste)
### Mostra as métricas
rmse(teste$ChanceOfAdmit, predicoes.rna)
r2(predicoes.rna, teste$ChanceOfAdmit)
### CV e parametrizacao da RNA
control <- trainControl(method = "cv", number = 10)
tuneGrid <- expand.grid(size = seq(from = 1, to = 3, by = 1), decay = seq(from = 0.1, to = 0.7, by = 0.3))
rna2 <- train(ChanceOfAdmit~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
### Predições e métricas
predicoes.rna2 <- predict(rna2, teste)
rmse(teste$ChanceOfAdmit, predicoes.rna2)
r2(predicoes.rna2, teste$ChanceOfAdmit)
### Novos casos
predict.rna <- predict(rna, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna)
predict.rna2 <- predict(rna2, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna2)
########################## SVN
### Treinar SVM com a base de Treino
svm <- train(ChanceOfAdmit~., data=treino, method="svmRadial")
### Aplicar modelos treinados na base de Teste
predicoes.svm <- predict(svm, teste)
### Calcular as métricas
rmse(teste$ChanceOfAdmit, predicoes.svm)
r2(predicoes.svm,teste$ChanceOfAdmit)
#### Cross-validation SVM
ctrl <- trainControl(method = "cv", number = 10)
svm2 <- train(ChanceOfAdmit~., data=treino, method="svmRadial", trControl=ctrl)
###Aplicar modelos treinados na base de Teste
predicoes.svm2 <- predict(svm2, teste)
### Calcular as métricas
rmse(teste$ChanceOfAdmit, predicoes.svm2)
r2(predicoes.svm2 ,teste$ChanceOfAdmit)
#### Vários C e sigma
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm3 <- train(ChanceOfAdmit~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
### 6. Aplicar modelos treinados na base de Teste
predicoes.svm3 <- predict(svm3, teste)
### Calcular as métricas
rmse(teste$ChanceOfAdmit, predicoes.svm3)
r2(predicoes.svm3,teste$ChanceOfAdmit)
### Novos casos
predict.svm <- predict(svm, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm)
predict.svm2 <- predict(svm2, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm2)
predict.svm3 <- predict(svm3, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm3)
View(dados_novos)
rf <- train(ChanceOfAdmit~.,data=treino,method="rf")
predicoes.rf <- predict(rf,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf)
r2(predicoes.rf,teste$ChanceOfAdmit)
##Cross Validation
ctrl <- trainControl(method="cv",number = 10)
rf2 <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl)
predicoes.rf2 <- predict(rf2,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf2)
r2(predicoes.rf2,teste$ChanceOfAdmit)
##Varios mtry
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf3 <- train(ChanceOfAdmit~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
predicoes.rf3 <- predict(rf3,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf3)
r2(predicoes.rf3,teste$ChanceOfAdmit)
predict.rf <- predict(rf, dados_novos)
dados_novos <- cbind(dados_novos, predict.rf)
predict.rf <- predict(rf2, dados_novos)
dados_novos <- cbind(dados_novos, predict.rf)
predict.rf <- predict(rf3, dados_novos)
dados_novos <- cbind(dados_novos, predict.rf)
library("caret")
library(mice)
dados <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/banco/banco.csv')
dados_novos <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/banco/banco_novos.csv')
View(dados)
### Set Seed
set.seed(728078902)
### Set Seed
set.seed(728078902)
### Cria arquivos de treino e teste
ran <- sample(1:nrow(dados), 0.8 * nrow(dados))
treino <- dados[ran,]
teste <- dados[-ran,]
########################## KNN
### Faz um grid com valores para K e Executa o KNN
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn <- train(y~., data = treino, method = "knn",tuneGrid=tuneGrid)
### Faz a predição e mostra a matriz de confusão
predict.knn <- predict(knn, teste)
confusionMatrix(predict.knn, as.factor(teste$y))
### PREDIÇÕES DE NOVOS CASOS
predict.knn <- predict(knn, dados_novos)
dados_novos$y <- NULL
dados_novos <- cbind(dados_novos, predict.knn)
########################## RNA
########## Treinar o modelo com Hold-out
rna <- train(y~., data=treino, method="nnet",trace=FALSE)
### Predições dos valores do conjunto de teste
predict.rna <- predict(rna, teste)
### Matriz de confusão
confusionMatrix(predict.rna, as.factor(teste$y))
########## Usando Cross-validation
### indica o método cv e numero de folders 10
ctrl <- trainControl(method = "cv", number = 10)
### executa a RNA com esse ctrl
rna2 <- train(y~., data=treino, method="nnet",trace=FALSE, trControl=ctrl)
predict.rna2 <- predict(rna2, teste)
confusionMatrix(predict.rna2, as.factor(teste$y))
########### Parametrização da RNA
### size, decay
grid <- expand.grid(size = seq(from = 1, to = 35, by = 10),decay = seq(from = 0.1, to = 0.6, by = 0.3))
rna3 <- train(
form = y~. ,
data = treino ,
method = "nnet" ,
tuneGrid = grid ,
trControl = ctrl ,
maxit = 2000,trace=FALSE)
### Faz as predições e mostra matriz de confusão
predict.rna3 <- predict(rna3, teste)
confusionMatrix(predict.rna3, as.factor(teste$y))
### PREDIÇÕES DE NOVOS CASOS
predict.rna <- predict(rna, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna)
predict.rna2 <- predict(rna2, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna2)
predict.rna3 <- predict(rna3, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna3)
########################## SVN
### Treinar SVM com a base de Treino
svm <- train(y~., data=treino, method="svmRadial")
### 6. Aplicar modelos treinados na base de Teste
predict.svm <- predict(svm, teste)
confusionMatrix(predict.svm, as.factor(teste$y))
#### Cross-validation SVM
ctrl <- trainControl(method = "cv", number = 10)
svm2 <- train(y~., data=treino, method="svmRadial", trControl=ctrl)
### matriz de confusao com todos os dados
predict.svm2 <- predict(svm2, teste)
confusionMatrix(predict.svm2, as.factor(teste$y))
#### Vários C e sigma
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm3 <- train(y~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
### matriz de confusao com todos os dados
predict.svm3 <- predict(svm3, teste)
confusionMatrix(predict.svm3, as.factor(teste$y))
### PREDIÇÕES DE NOVOS CASOS
predict.svm <- predict(svm, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm)
predict.svm2 <- predict(svm2, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm2)
predict.svm3 <- predict(svm3, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm3)
View(dados)
########################## Random Forest
rf <- train(y~.,data=treino,method="rf")
predict.rs <-predict(rf,teste)
confusionMatrix(predict.rf,as.factor(teste$y))
predict.rf <-predict(rf,teste)
confusionMatrix(predict.rf,as.factor(teste$y))
rf <- train(y~.,data=treino,method="rf",trControl=ctrl)
########################## Random Forest
rf <- train(y~.,data=treino,method="rf")
predict.rf <-predict(rf,teste)
confusionMatrix(predict.rf,as.factor(teste$y))
##Cross Validation
ctrl <- trainControl(method = "cv", number = 10)
rf2 <- train(y~.,data=treino,method="rf",trControl=ctrl)
predict.rf2 <-predict(rf2,teste)
confusionMatrix(predict.rf2,as.factor(teste$y))
##Vários mtry
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf3 <- train(y~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
predict.rf3 <- predict(rf3,teste)
confusionMatrix(predict.rf3,as.factor(teste$y))
##novos dados
pred.rf <- predict(rf,dados_novos)
dados_novos <- cbind(dados_novos,pred.rf)
View(dados_novos)
pred.rf3 <- predict(rf3,dados_novos)
dados_novos <- cbind(dados_novos,pred.rf3)
pred.rf2 <- predict(rf2,dados_novos)
dados_novos <- cbind(dados_novos,pred.rf2)
library(mlbench)
library(caret)
library(mice)
library(Metrics)
dados <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/alunos/alunos.csv')
dados_novos <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/alunos/alunos_novos.csv')
View(dados)
View(dados_novos)
View(dados)
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$G3, p=0.80, list = FALSE)
treino <- dados[ind,]
gc()
library(mlbench)
library(caret)
library(mice)
library(Metrics)
dados <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/alunos/alunos.csv')
dados_novos <- read.csv(file = '/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste/alunos/alunos_novos.csv')
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$G3, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
r2 <- function(predito, observado) {
return(1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
########################## KNN
### Prepara um grid com os valores de k que serão usados
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(G3 ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
### Mostra as métricas
rmse(teste$G3, predict.knn)
r2(predict.knn,teste$G3)
### PREDIÇÕES DE NOVOS CASOS
predict.knn <- predict(knn, dados_novos)
dados_novos$G3 <- NULL
dados_novos <- cbind(dados_novos, predict.knn)
########################## RNA
### Treino com Hold-Out
rna <- train(G3~., data=treino, method="nnet", linout=T, trace=FALSE)
predicoes.rna <- predict(rna, teste)
### Mostra as métricas
rmse(teste$G3, predicoes.rna)
r2(predicoes.rna, teste$G3)
### CV e parametrizacao da RNA
control <- trainControl(method = "cv", number = 10)
tuneGrid <- expand.grid(size = seq(from = 1, to = 3, by = 1), decay = seq(from = 0.1, to = 0.7, by = 0.3))
rna2 <- train(G3~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
### Predições e métricas
predicoes.rna2 <- predict(rna2, teste)
rmse(teste$G3, predicoes.rna2)
r2(predicoes.rna2, teste$G3)
### Novos casos
predict.rna <- predict(rna, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna)
predict.rna2 <- predict(rna2, dados_novos)
dados_novos <- cbind(dados_novos, predict.rna2)
########################## SVN
### Treinar SVM com a base de Treino
svm <- train(G3~., data=treino, method="svmRadial")
### Aplicar modelos treinados na base de Teste
predicoes.svm <- predict(svm, teste)
### Calcular as métricas
rmse(teste$G3, predicoes.svm)
r2(predicoes.svm,teste$G3)
#### Cross-validation SVM
ctrl <- trainControl(method = "cv", number = 10)
svm2 <- train(G3~., data=treino, method="svmRadial", trControl=ctrl)
### 6. Aplicar modelos treinados na base de Teste
predicoes.svm2 <- predict(svm2, teste)
### Calcular as métricas
rmse(teste$G3, predicoes.svm2)
r2(predicoes.svm2 ,teste$G3)
#### Vários C e sigma
tuneGrid = expand.grid(C=c(1, 2, 10, 50, 100), sigma=c(.01, .015, 0.2))
svm3 <- train(G3~., data=treino, method="svmRadial", trControl=ctrl, tuneGrid=tuneGrid)
### 6. Aplicar modelos treinados na base de Teste
predicoes.svm3 <- predict(svm3, teste)
### Calcular as métricas
rmse(teste$G3, predicoes.svm3)
r2(predicoes.svm3,teste$G3)
### Novos casos
predict.svm <- predict(svm, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm)
predict.svm2 <- predict(svm2, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm2)
predict.svm3 <- predict(svm3, dados_novos)
dados_novos <- cbind(dados_novos, predict.svm3)
rf <- train(G3~.,data=treino,method="rf")
predicoes.rf <- predict(rf,teste)
rmse(teste$ChanceOfAdmit,predicoes.rf)
r2(predicoes.rf,teste$ChanceOfAdmit)
rf <- train(G3~.,data=treino,method="rf")
predicoes.rf <- predict(rf,teste)
rmse(teste$G3,predicoes.rf)
r2(predicoes.rf,teste$G3)
##Cross Validation
ctrl <- trainControl(method="cv",number = 10)
rf2 <- train(G3~.,data=treino,method="rf",trControl=ctrl)
predicoes.rf2 <- predict(rf2,teste)
rmse(teste$G3,predicoes.rf2)
r2(predicoes.rf2,teste$G3)
##Varios mtry
tuneGrid = expand.grid(mtry=c(2,5,7,9))
rf3 <- train(G3~.,data=treino,method="rf",trControl=ctrl,tuneGrid=tuneGrid)
predicoes.rf3 <- predict(rf3,teste)
rmse(teste$G3,predicoes.rf3)
r2(predicoes.rf3,teste$G3)
predict.rf <- predict(rf, dados_novos)
dados_novos <- cbind(dados_novos, predict.rf)
predict.rf2 <- predict(rf2, dados_novos)
dados_novos <- cbind(dados_novos, predict.rf2)
predict.rf3 <- predict(rf3, dados_novos)
dados_novos <- cbind(dados_novos, predict.rf3)
gc()
library("caret")
library(mlbench)
library(mice)
##Note
setwd('/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste')
barra ="/"
dados <- read.csv(file = paste('veiculos','veiculos.csv',sep =barra))
### set seed
set.seed(728078902)
### retira id
dados$a <- NULL
dados_novos$a <- NULL
###Cria arquivo de treino e teste
ran <- sample(1:nrow(dados), 0.8 * nrow(dados))
treino <- dados[ran,]
teste <- dados[-ran,]
########################## SVM
svm <- train(tipo~.,data=treino,method="svmRadial")
svm
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm,as.factor(teste$tipo))
ctrl <- trainControl(method="cv",number=10)
set.seed(728078902)
########################## SVM
svm <- train(tipo~.,data=treino,method="svmRadial")
##Note
setwd('/Users/MPPR/Documents/Pos_IA/pos_ia_aprendizado_maquina/Bases_de_teste')
barra ="/"
dados <- read.csv(file = paste('veiculos','veiculos.csv',sep =barra))
### set seed
set.seed(728078902)
### retira id
dados$a <- NULL
###Cria arquivo de treino e teste
ran <- sample(1:nrow(dados), 0.8 * nrow(dados))
treino <- dados[ran,]
teste <- dados[-ran,]
########################## SVM
svm <- train(tipo~.,data=treino,method="svmRadial")
svm
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm,as.factor(teste$tipo))
###Cross Validation
ctrl <- trainControl(method="cv",number=10)
svm_cv <- train(tipo~.,data=treino,method="svmRadial",trControl=ctrl)
svm_cv
predict.svm_cv <- predict(svm_cv,teste)
confusionMatrix(predict.svm_cv,as.factor(teste$tipo))
###Parametrização
tuneGrid = expand.grid(C=c(1,2,10,50,100),sigma=c(.01,.015,0.2))
svm_par <- train(tipo~.,data=treino,method="svmRadial",trControl=ctrl,tuneGrid=tuneGrid)
svm_par
predict.svm_par <- predict(svm_par,teste)
confusionMatrix(predict.svm_par,as.factor(teste$tipo))
