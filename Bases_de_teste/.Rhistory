library(mlbench)
library(caret)
library(mice)
library(Metrics)
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('biomassa','biomassa.csv',sep =barra))
dados_novos <- read.csv(file = paste('biomassa','biomassa_novos.csv',sep =barra))
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$biomassa, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return(1 - (sum((observado-predito)^2) / sum((observado-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
return(sum((observado-predito)^2) / (nrow(base) - (length(base)-1) ) )
}
########################## KNN
### Prepara um grid com os valores de k que serão usados
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(biomassa ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
r2(predict.knn,teste$biomassa)
F_r2 <- function(observado,predito) {
return(1 - (sum((observado-predito)^2) / sum((observado-mean(observado))^2)))
}
F_r2(predict.knn,teste$biomassa)
F_r2(teste$biomassa,predict.knn)
F_r2 <- function(observado,predito) {
#return(1 - (sum((observado-predito)^2) / sum((observado-mean(observado))^2)))
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
F_r2(teste$biomassa,predict.knn)
rmse(teste$biomassa, predict.knn)
MAE(predict.knn,teste$biomassa)
### Mostra as métricas
F_r2(teste$biomassa,predict.knn)
F_RMSE(teste$biomassa,predict.knn)
F_RMSE(teste$biomassa,predict.knn,teste)
rmse(teste$biomassa, predict.knn)
MAE(predict.knn,teste$biomassa)
F_MAE(teste$biomassa,predict.knn,teste)
MAE(predict.knn,teste$biomassa)
F_MAE(teste$biomassa,predict.knn,teste)
cor(predict.knn,teste$biomassa, method = c("pearson"))
F_SYX(teste$biomassa,predict.knn,teste)
F_SYX(teste$biomassa,predict.knn,teste)
knn
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return val1 / val2
}
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (val1 / val2)
}
F_SYX(teste$biomassa,predict.knn,teste)
nrow(base)
nrow(teste)
length(teste)
View(teste)
F_r2(teste$biomassa,predict.knn)
F_r2 <- function(observado,predito) {
#return(1 - (sum((observado-predito)^2) / sum((observado-mean(observado))^2)))
return (1 - (sum((observado-predito)^2) / sum((predito-mean(observado))^2)))
}
F_r2(teste$biomassa,predict.knn)
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
F_r2(teste$biomassa,predict.knn)
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base)
return (sqrt(val1 / val2))
}
F_SYX(teste$biomassa,predict.knn,teste)
View(dados)
View(teste)
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
F_PEARSON(teste$biomassa,predict.knn)
library(mlbench)
library(caret)
library(mice)
library(Metrics)
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('biomassa','biomassa.csv',sep =barra))
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$biomassa, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base)
return (sqrt(val1 / val2))
}
### Função Pearson
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
########################## KNN
### Prepara um grid com os valores de k que serão usados
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(biomassa ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
### Mostra as métricas
F_r2(teste$biomassa,predict.knn)
F_SYX(teste$biomassa,predict.knn,teste)
F_PEARSON(teste$biomassa,predict.knn)
F_RMSE(teste$biomassa,predict.knn,teste)
F_MAE(teste$biomassa,predict.knn,teste)
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (sqrt(val1 / val2))
}
F_SYX(teste$biomassa,predict.knn,teste)
RMSE(predict.knn,teste$biomassa)
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('biomassa','biomassa.csv',sep =barra))
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$biomassa, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (sqrt(val1 / val2))
}
### Função Pearson
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
########################## KNN
### Prepara um grid com os valores de k que serão usados
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(biomassa ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
### Mostra as métricas
F_r2(teste$biomassa,predict.knn)
F_SYX(teste$biomassa,predict.knn,teste)
F_PEARSON(teste$biomassa,predict.knn)
F_RMSE(teste$biomassa,predict.knn,teste)
F_MAE(teste$biomassa,predict.knn,teste)
########################## RNA
### Treino com Hold-Out
rna <- train(biomassa~., data=treino, method="nnet", linout=T, trace=FALSE)
View(teste)
imp <- mice(dados)
dados <- complete(imp,1)
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$biomassa, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
########################## KNN
### Prepara um grid com os valores de k que serão usados
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(biomassa ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
### Mostra as métricas
F_r2(teste$biomassa,predict.knn)
F_SYX(teste$biomassa,predict.knn,teste)
F_PEARSON(teste$biomassa,predict.knn)
F_RMSE(teste$biomassa,predict.knn,teste)
F_MAE(teste$biomassa,predict.knn,teste)
########################## RNA
### Treino com Hold-Out
rna <- train(biomassa~., data=treino, method="nnet", linout=T, trace=FALSE)
rna
predict.rna <- predict(rna, teste)
### Mostra as métricas
F_r2(teste$biomassa,predict.rna)
F_SYX(teste$biomassa,predict.rna,teste)
F_PEARSON(teste$biomassa,predict.rna)
F_RMSE(teste$biomassa,predict.rna,teste)
F_MAE(teste$biomassa,predict.rna,teste)
### CV e parametrizacao da RNA
control <- trainControl(method = "cv", number = 10)
tuneGrid <- expand.grid(size = seq(from = 1, to = 3, by = 1), decay = seq(from = 0.1, to = 0.7, by = 0.3))
rna_cv <- train(biomassa~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
### Predições e métricas
predict.rna_cv <- predict(rna_cv, teste)
F_r2(teste$biomassa,predict.rna_cv)
F_SYX(teste$biomassa,predict.rna_cv,teste)
F_PEARSON(teste$biomassa,predict.rna_cv)
F_RMSE(teste$biomassa,predict.rna_cv,teste)
F_MAE(teste$biomassa,predict.rna_cv,teste)
### CV
control <- trainControl(method = "cv", number = 10)
rna_cv <- train(biomassa~., data=treino, method="nnet", trainControl=control, linout=T, trace=F)
control <- trainControl(method = "cv", number = 10)
rna_cv <- train(biomassa~., data=treino, method="nnet", trainControl=control, linout=T, trace=F)
### Predições e métricas
predict.rna_cv <- predict(rna_cv, teste)
F_r2(teste$biomassa,predict.rna_cv)
F_SYX(teste$biomassa,predict.rna_cv,teste)
F_PEARSON(teste$biomassa,predict.rna_cv)
F_RMSE(teste$biomassa,predict.rna_cv,teste)
F_MAE(teste$biomassa,predict.rna_cv,teste)
###Parametrização
tuneGrid <- expand.grid(size = seq(from = 1, to = 45, by = 10), decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(biomassa~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna_cv
rna_par
predict.rna_par <- predict(rna_par, teste)
F_r2(teste$biomassa,predict.rna_par)
F_SYX(teste$biomassa,predict.rna_par,teste)
F_PEARSON(teste$biomassa,predict.rna_par)
F_RMSE(teste$biomassa,predict.rna_par,teste)
F_MAE(teste$biomassa,predict.rna_par,teste)
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(biomassa~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna_par
predict.rna_par <- predict(rna_par, teste)
F_r2(teste$biomassa,predict.rna_par)
F_SYX(teste$biomassa,predict.rna_par,teste)
F_PEARSON(teste$biomassa,predict.rna_par)
F_RMSE(teste$biomassa,predict.rna_par,teste)
F_MAE(teste$biomassa,predict.rna_par,teste)
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$ChanceOfAdmit, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
dados <- read.csv(file = paste('admissao','admissao.csv',sep =barra))
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('admissao','admissao.csv',sep =barra))
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$ChanceOfAdmit, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (sqrt(val1 / val2))
}
### Função Pearson
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
########################## KNN
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(ChanceOfAdmit ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
########################## KNN
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
knn
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
F_r2(teste$ChanceOfAdmit,predict.knn)
F_SYX(teste$ChanceOfAdmit,predict.knn,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.knn)
F_RMSE(teste$ChanceOfAdmit,predict.knn,teste)
F_MAE(teste$ChanceOfAdmit,predict.knn,teste)
########################## RNA
### Treino com Hold-Out
rna <- train(ChanceOfAdmit~., data=treino, method="nnet", linout=T, trace=FALSE)
rna
predict.rna <- predict(rna, teste)
F_r2(teste$ChanceOfAdmit,predict.rna)
F_SYX(teste$ChanceOfAdmit,predict.rna,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rna)
F_RMSE(teste$ChanceOfAdmit,predict.rna,teste)
F_MAE(teste$ChanceOfAdmit,predict.rna,teste)
### CV
control <- trainControl(method = "cv", number = 10)
rna_cv <- train(ChanceOfAdmit~., data=treino, method="nnet", trainControl=control, linout=T, trace=F)
rna_cv
predict.rna_cv <- predict(rna_cv, teste)
F_r2(teste$ChanceOfAdmit,predict.rna_cv)
F_SYX(teste$ChanceOfAdmit,predict.rna_cv,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rna_cv)
F_RMSE(teste$ChanceOfAdmit,predict.rna_cv,teste)
F_MAE(teste$ChanceOfAdmit,predict.rna_cv,teste)
###Parametrização
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(ChanceOfAdmit~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna_par
predict.rna_par <- predict(rna_par, teste)
F_r2(teste$ChanceOfAdmit,predict.rna_par)
F_SYX(teste$ChanceOfAdmit,predict.rna_par,teste)
F_PEARSON(teste$ChanceOfAdmit,predict.rna_par)
F_RMSE(teste$ChanceOfAdmit,predict.rna_par,teste)
F_MAE(teste$ChanceOfAdmit,predict.rna_par,teste)
##Maquina MP
setwd('C:\\Users\\escneto\\Documents\\Estudos\\Pos_IA_UFPR\\pos_ia_aprendizado_maquina\\Bases_de_teste')
barra ="\\"
dados <- read.csv(file = paste('alunos','alunos.csv',sep =barra))
###Set seed
set.seed(728078902)
### Cria arquivos de treino e teste
ind <- createDataPartition(dados$G3, p=0.80, list = FALSE)
treino <- dados[ind,]
teste <- dados[-ind,]
### Função R2
F_r2 <- function(observado,predito) {
return (1 - (sum((predito-observado)^2) / sum((predito-mean(observado))^2)))
}
### Função MAE
F_MAE <- function(observado,predito,base) {
return(sum(abs(observado-predito)) / nrow(base))
}
### Função RMSE
F_RMSE <- function(observado,predito,base) {
return( sqrt(sum((observado-predito)^2) / nrow(base)) )
}
### Função Syx
F_SYX <- function(observado,predito,base) {
val1 = sum((observado-predito)^2)
val2 = nrow(base) - (length(base)-1)
return (sqrt(val1 / val2))
}
### Função Pearson
F_PEARSON <- function(observado,predito) {
val1 = sum((observado-mean(observado)) * (predito-mean(predito)))
val2 = sqrt(sum((observado-mean(observado))^2))
val3 = sqrt(sum((predito-mean(predito))^2))
return (val1 / (val2 * val3))
}
########################## KNN
### Prepara um grid com os valores de k que serão usados
tuneGrid <- expand.grid(k = c(1,3,5,7,9))
### Executa o Knn com esse grid
knn <- train(G3 ~ ., data = treino, method = "knn",
tuneGrid=tuneGrid)
knn
### Aplica o modelo no arquivo de teste
predict.knn <- predict(knn, teste)
F_r2(teste$G3,predict.knn)
F_SYX(teste$G3,predict.knn,teste)
F_PEARSON(teste$G3,predict.knn)
F_RMSE(teste$G3,predict.knn,teste)
F_MAE(teste$G3,predict.knn,teste)
View(teste)
########################## RNA
### Treino com Hold-Out
rna <- train(G3~., data=treino, method="nnet", linout=T, trace=FALSE)
rna
predict.rna <- predict(rna, teste)
F_r2(teste$G3,predict.rna)
F_SYX(teste$G3,predict.rna,teste)
F_PEARSON(teste$G3,predict.rna)
F_RMSE(teste$G3,predict.rna,teste)
F_MAE(teste$G3,predict.rna,teste)
### CV
control <- trainControl(method = "cv", number = 10)
rna_cv <- train(G3~., data=treino, method="nnet", trainControl=control, linout=T, trace=F)
rna_cv
predict.rna_cv <- predict(rna_cv, teste)
F_r2(teste$G3,predict.rna_cv)
F_SYX(teste$G3,predict.rna_cv,teste)
F_PEARSON(teste$G3,predict.rna_cv)
F_RMSE(teste$G3,predict.rna_cv,teste)
F_MAE(teste$G3,predict.rna_cv,teste)
###Parametrização
tuneGrid <- expand.grid(size = seq(from = 1, to = 10, by = 1), decay = seq(from = 0.1, to = 0.9, by = 0.3))
rna_par <- train(G3~., data=treino, method="nnet", trainControl=control, tuneGrid=tuneGrid, linout=T, MaxNWts=10000, maxit=2000, trace=F)
rna_par
predict.rna_par <- predict(rna_par, teste)
F_r2(teste$G3,predict.rna_par)
F_SYX(teste$G3,predict.rna_par,teste)
F_PEARSON(teste$G3,predict.rna_par)
F_RMSE(teste$G3,predict.rna_par,teste)
F_MAE(teste$G3,predict.rna_par,teste)
